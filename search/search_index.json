{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":"The py-url-shortener API <p>Py URL Shortener API is a lightweight, high-performance backend service designed to:</p> <ul> <li>Shorten long URLs into compact, shareable links.</li> <li>Redirect users to the original URL with proper HTTP status handling.</li> <li>Track clicks and metadata such as IP, user agent, and referer.</li> <li>Optionally, expire URLs after a set period.</li> </ul> <p>Ready to jump right in?</p> <p>See the API reference for all endpoints.</p> <p>This application is built with FastAPI, uses PostgreSQL for persistent storage, and leverages Redis (ready for caching, analytics, or rate-limiting). Docker Compose orchestrates the services, and Traefik handles routing and reverse proxy.</p>"},{"location":"#shorten-your-first-link","title":"Shorten your first link","text":"<p>You'll use the <code>POST</code> method to the <code>/api/v1/shorten</code> endpoint. Here's an example:</p> <p>Path: /api/v1/shorten</p> <p>Method: POST</p> <p>Request Body - example: <pre><code>{\n  \"url\": \"https://google.com/\",\n  \"expires_in\": 3600\n}\n</code></pre> Response - example: <pre><code>{\n  \"short_url\": \"http://localhost/r/HrTBms\",\n  \"code\": \"HrTBms\",\n  \"expires_at\": \"2025-10-21T16:26:30.000Z\"\n}\n</code></pre></p> <p>A successful response will return the shortened link in the link object.</p> <p>Go to our API reference to view all available endpoints.</p>"},{"location":"about/","title":"About","text":"<p>Py URL Shortener API was created by Adan Siqueira.  </p> <p>It is a lightweight, fast, and reliable backend service for generating short URLs, tracking clicks, and providing analytics in a modular and scalable architecture.  </p>"},{"location":"about/#about-the-author","title":"About the Author","text":"<p>Adan Siqueira is a software engineer and data enthusiast. - \ud83d\udd17 GitHub Profile </p>"},{"location":"architecture/","title":"Architecture","text":"<p>The project uses a Layered Architecture with a light microservices approach:</p> <ul> <li>FastAPI: Handles asynchronous HTTP requests, endpoints, and business logic.</li> <li>PostgreSQL: Stores URLs and click metadata persistently.</li> <li>Redis: Optional caching or analytics (ready for future enhancements).</li> <li>Traefik: Reverse proxy for routing HTTP requests, provides a dashboard for monitoring.</li> </ul> <p>All components are containerized using Docker, orchestrated with Docker Compose, ensuring easy deployment and reproducibility.</p>"},{"location":"architecture/#architecture-diagram","title":"Architecture Diagram","text":""},{"location":"errors/","title":"Errors","text":"<p>This section details possible errors the Py URL Shortener API can return, along with the status codes and reasons.</p>"},{"location":"errors/#common-error-responses","title":"Common Error Responses","text":"HTTP Status Error Type Description 404 Not Found The requested URL or code does not exist. For example, accessing <code>/r/invalidCode</code>. 410 Gone The requested short URL has expired. Accessing an expired URL will return this. 422 Unprocessable Entity Invalid input data. For example, providing a malformed URL in the <code>/shorten</code> endpoint. 500 Internal Server Error Unexpected server errors, such as database connection issues."},{"location":"errors/#examples","title":"Examples","text":""},{"location":"errors/#1-shorten-url-with-invalid-url","title":"1. Shorten URL with invalid URL","text":"<p>Request: <pre><code>POST /api/v1/shorten\nContent-Type: application/json\n\n{\n  \"url\": \"ht!tp://invalid-url\",\n  \"expires_in\": 60\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"detail\": [\n    {\n      \"loc\": [\"body\", \"url\"],\n      \"msg\": \"invalid or missing URL\",\n      \"type\": \"value_error.url\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"errors/#2-access-expired-url","title":"2. Access expired URL","text":"<p>Request: <pre><code>GET /r/expired123\n</code></pre></p> <p>Response:</p> <pre><code>{\n  \"detail\": \"URL expired\"\n}\n</code></pre>"},{"location":"errors/#3-access-non-existent-short-code","title":"3. Access non-existent short code","text":"<p>Request: <pre><code>GET /r/notfound\n</code></pre></p> <p>Response: <pre><code>{\n  \"detail\": \"URL not found\"\n}\n</code></pre></p>"},{"location":"examples/","title":"Examples","text":"<p>This section provides practical usage examples for the Py URL Shortener API endpoints.</p>"},{"location":"examples/#1-shorten-a-url","title":"1. Shorten a URL","text":"<p>Request: <pre><code>POST /api/v1/shorten\nContent-Type: application/json\n\n{\n  \"url\": \"https://www.youtube.com/watch?v=LYU-8IFcDPw\",\n  \"expires_in\": 60\n}\n</code></pre></p> <p>Response: <pre><code>{\n  \"short_url\": \"http://localhost/r/97ptsI\",\n  \"code\": \"97ptsI\",\n  \"created_at\": \"2025-10-22T15:54:30.650563\",\n  \"expires_at\": \"2025-10-22T16:54:30.650610+00:00\"\n}\n</code></pre></p> <p>Explanation: This example shortens a YouTube link and sets it to expire in 60 minutes.</p>"},{"location":"examples/#2-redirect-to-original-url","title":"2. Redirect to Original URL","text":"<p>Request:</p> <pre><code>GET /r/97ptsI\n</code></pre> <p>Response: Redirects to the original URL: https://www.youtube.com/watch?v=LYU-8IFcDPw</p> <p>Explanation: Every redirection logs a click event in the database, capturing IP, user-agent, referer, and timestamp.</p>"},{"location":"examples/#3-retrieve-url-statistics","title":"3. Retrieve URL Statistics","text":"<p>Request:</p> <pre><code>GET /api/v1/stats/97ptsI\n</code></pre> <p>Response:</p> <pre><code>{\n  \"code\": \"97ptsI\",\n  \"original_url\": \"https://www.youtube.com/watch?v=LYU-8IFcDPw\",\n  \"created_at\": \"2025-10-22T15:54:30.650563\",\n  \"expires_at\": \"2025-10-22T16:54:30.650610+00:00\",\n  \"total_clicks\": 3,\n  \"last_click_at\": \"2025-10-23T10:00:00.000000\",\n  \"clicks\": [\n    {\"click_id\": 1, \"time\": \"2025-10-22T10:00:00.000000\"},\n    {\"click_id\": 2, \"time\": \"2025-10-22T11:00:00.000000\"},\n    {\"click_id\": 3, \"time\": \"2025-10-23T10:00:00.000000\"}\n  ]\n}\n</code></pre> <p>Explanation: Shows total clicks, last access, and individual click timestamps for analytics purposes.</p>"},{"location":"redirect/","title":"Redirect to Original URL","text":""},{"location":"redirect/#redirect-to-original-url","title":"Redirect to Original URL","text":"<p>Path: <code>/r/{code}</code> Method: <code>GET</code> </p> <p>The Redirect endpoint takes a short code and forwards users to the corresponding original URL. It also logs metadata for each access, enabling click tracking and analytics.</p> <p>Use Cases: - Sharing shortened URLs while logging click data. - Expiring links for limited-time offers or events. - Collecting analytics on user engagement (IP, device, referer). </p> <p>Request - example: <code>/r/HrTBms</code></p> <p>Response - example: <code>Redirects to the original URL (in this case: https://google.com).</code></p> <p>How It Works: 1. Receives a short code in the path. 2. Queries the database for the corresponding URL record. 3. Checks if the URL exists and if it has expired. 4. If valid, creates a click record containing IP address, user agent, referer, and timestamp. 5. Redirects the client to the original URL using an HTTP redirect (302/307).  </p> <p>Implementation Highlights: - Uses FastAPI\u2019s RedirectResponse to handle HTTP redirection. - Clicks are logged asynchronously with SQLAlchemy AsyncSession for non-blocking performance. - Expiration check prevents redirection if the URL has expired (returns HTTP 410). - Supports logging user metrics for analytics dashboards (IP, user agent, referer).  </p>"},{"location":"retrieve-link-stats/","title":"Retrieve Link Statistics","text":""},{"location":"retrieve-link-stats/#retrieve-link-statistics","title":"Retrieve Link Statistics","text":"<p>Path: /api/v1/stats/{code} Method: GET  </p> <p>This endpoint provides detailed statistics for a shortened URL. It allows you to monitor link performance and user engagement by retrieving: - Total number of clicks - Creation and expiration timestamps - The time of the most recent access - A list of all individual click events with their timestamps  </p> <p>This feature is foundational for building an analytics dashboard \u2014 enabling insight into traffic behavior, popular links, and user interaction over time.</p>"},{"location":"retrieve-link-stats/#response-example","title":"Response Example","text":"<p>Request: <code>GET /api/v1/stats/HrTBms</code></p> <p>Response: <pre><code>{\n  \"code\": \"HrTBms\",\n  \"original_url\": \"https://google.com/\",\n  \"created_at\": \"2025-10-21T15:26:30.000Z\",\n  \"expires_at\": \"2025-10-22T15:26:30.000Z\",\n  \"total_clicks\": 3,\n  \"last_click_at\": \"2025-10-23T10:00:00.000Z\",\n  \"clicks\": [\n    { \"click_id\": 1, \"time\": \"2025-10-22T10:00:00.000Z\" },\n    { \"click_id\": 2, \"time\": \"2025-10-22T11:00:00.000Z\" },\n    { \"click_id\": 3, \"time\": \"2025-10-23T10:00:00.000Z\" }\n  ]\n}\n</code></pre></p>"},{"location":"retrieve-link-stats/#how-it-works","title":"How It Works","text":"<p>When a user accesses a shortened URL (via <code>/r/{code}</code>), each visit is logged in the database with: - The <code>URL ID</code> (from the main URL table) - The <code>Click ID</code> - The <code>occurred_at</code> timestamp - The <code>IP</code>, <code>Referer</code>, and <code>User-Agent</code> </p> <p>The <code>/api/v1/stats/{code}</code> endpoint then: 1. Looks up the original URL using its unique code. 2. Counts total clicks (<code>func.count(Click.id)</code>). 3. Finds the last click timestamp (<code>func.max(Click.occurred_at)</code>). 4. Lists every click event (click ID + time). 5. Returns a structured JSON object with these statistics.</p> <p>Implementation Highlights </p> <ul> <li> <p>Aggregates statistics using func.count() and func.max() for performance.</p> </li> <li> <p>Returns ISO 8601 timestamps for consistency and API interoperability.</p> </li> <li> <p>Designed to integrate seamlessly with upcoming front-end dashboards or analytics modules.</p> </li> <li> <p>Handles missing codes gracefully with a clear 404 error response:</p> </li> </ul> <p>Use Cases</p> <ul> <li> <p>Powering analytics dashboards for tracking link performance.</p> </li> <li> <p>Logging or monitoring system for marketing campaigns.</p> </li> <li> <p>Auditing and validating system activity across shortened URLs.</p> </li> </ul>"},{"location":"shorten-a-link/","title":"Shorten a link","text":""},{"location":"shorten-a-link/#shorten-url","title":"Shorten URL","text":"<p>Path: <code>/api/v1/shorten</code> Method: <code>POST</code> </p> <p>The shorten URL endpoint allows users to convert long, unwieldy URLs into compact, shareable short codes. This is the core functionality of the URL shortener API, enabling easier sharing and tracking.</p> <p>Use Cases:</p> <ul> <li> <p>Shortening URLs for social media posts, emails, or QR codes.</p> </li> <li> <p>Tracking clicks for marketing campaigns.</p> </li> <li> <p>Limiting link lifetime using the expires_in parameter.</p> </li> </ul> <p>Request Body - example: <pre><code>{\n  \"url\": \"https://google.com/\",\n  \"expires_in\": 3600\n}\n</code></pre></p> <p>Response - example: <pre><code>{\n  \"short_url\": \"http://localhost/r/HrTBms\",\n  \"code\": \"HrTBms\",\n  \"created_at\": \"2025-10-21T16:20:00.000Z\",\n  \"expires_at\": \"2025-10-21T17:20:00.000Z\"\n}\n</code></pre></p> <p>How It Works: 1. Receives a JSON payload containing the original URL and optional expiration time. 2. Generates a unique 6-character code using SHA-256 hashing and Base62 encoding. 3. Checks the database to avoid code collisions. 4. Stores the original URL along with the short code and expiration timestamp in the database. 5. Returns a JSON object containing the short URL, code, and expiration datetime.  </p> <p>Implementation Highlights: - Uses FastAPI for asynchronous handling of requests. - SQLAlchemy AsyncSession ensures non-blocking database operations. - Pydantic validates URL input and expiration parameters. - Code generation is deterministic and collision-resistant. - Optional expiration is handled by computing a future <code>expires_at</code> timestamp.  </p>"}]}